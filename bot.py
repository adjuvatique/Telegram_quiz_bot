import os
import pathlib
import logging
import json
import random
import asyncio
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    filename='quiz_bot.log',
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
dotenv_path = pathlib.Path(__file__).parent / '.env'
load_dotenv(dotenv_path=dotenv_path, override=True)

# –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
SHEET_ID = os.getenv('GS_SHEET_ID')
TOKEN = os.getenv('TG_QUIZ_TOKEN')
RATING_FILE = 'rating.json'

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
CATEGORIES = [
    "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–∏–∫—Å",
    "–¢–∏–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
    "–¢–µ—Ö–Ω–∏–∫–∏ –¥–∏–∑–∞–π–Ω–∞ —Ç–µ—Å—Ç–æ–≤",
    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏",
    "DevOps –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è",
    "API‚Äë—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–µ–±‚Äë—Å–µ—Ä–≤–∏—Å—ã",
    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–≥—Ä—É–∑–∫–∞",
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (Security Testing)",
    "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —é–∑–∞–±–∏–ª–∏—Ç–∏",
    "–ú–æ–±–∏–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (Compatibility)",
    "–ü—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–∫—Ä–∏–ø—Ç—ã",
    "–ú—è–≥–∫–∏–µ –Ω–∞–≤—ã–∫–∏ (Soft Skills)"
]
QUESTIONS: dict = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Google Sheets
def load_questions_from_sheets() -> dict:
    scope = ['https://www.googleapis.com/auth/spreadsheets.readonly']
    creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SHEET_ID).sheet1
    rows = sheet.get_all_records()
    questions = {cat: [] for cat in CATEGORIES if cat != "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–∏–∫—Å"}
    for row in rows:
        cat = str(row.get('category', '')).strip()
        if cat in questions:
            questions[cat].append({
                'question': str(row.get('question', '')).strip(),
                'options': [str(row.get(f'option{i}', '')).strip() for i in range(1, 5)],
                'answer': str(row.get('answer', '')).strip(),
                'difficulty': str(row.get('difficulty', '–°—Ä–µ–¥–Ω–∏–π')).strip()
            })
    return questions

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
async def init_questions():
    global QUESTIONS
    try:
        QUESTIONS = await asyncio.to_thread(load_questions_from_sheets)
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {sum(len(v) for v in QUESTIONS.values())}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        QUESTIONS = {cat: [] for cat in CATEGORIES if cat != "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–∏–∫—Å"}

# –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
def get_timeout(difficulty: str) -> int:
    return {"–õ—ë–≥–∫–∏–π": 10, "–°—Ä–µ–¥–Ω–∏–π": 20, "–°–ª–æ–∂–Ω—ã–π": 30}.get(difficulty, 20)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ chat_id
async def send_question_by_chat_id(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    data = context.chat_data
    qlist = data.get('questions', [])
    idx = data.get('index', 0)

    if idx >= len(qlist) or not qlist:
        return await end_quiz_by_chat_id(chat_id, context)

    q = qlist[idx]
    data['current_q'] = q
    timeout = get_timeout(q.get('difficulty', '–°—Ä–µ–¥–Ω–∏–π'))
    job = context.job_queue.run_once(
        time_up,
        timeout,
        chat_id=chat_id,
        name=f"timeup_{chat_id}"
    )
    data['job'] = job

    kb = ReplyKeyboardMarkup([[opt] for opt in q['options']], one_time_keyboard=True, resize_keyboard=True)
    text = (f"‚ùì –í–æ–ø—Ä–æ—Å {idx+1}/{len(qlist)}\n"
            f"{q['question']}\n"
            f"({q.get('difficulty')})")
    await context.bot.send_message(chat_id, text, reply_markup=kb)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞: –ø–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
async def end_quiz_by_chat_id(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    data = context.chat_data
    score = data.get('score', 0)
    total = len(data.get('questions', []))
    percent = (score / total * 100) if total else 0
    medal = ("üèÖ –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!" if percent >= 90 else
             "üëè –û—Ç–ª–∏—á–Ω–æ!" if percent >= 70 else
             "üëç –•–æ—Ä–æ—à–æ!" if percent >= 50 else
             "üí° –£—á–∏—Ç—å—Å—è –µ—Å—Ç—å —á–µ–º—É!" if percent >= 30 else
             "üòÖ –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è!")
    msg = f"üßæ –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}\n{medal}"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    rating = context.bot_data.setdefault('rating', {})
    chat = await context.bot.get_chat(chat_id)
    name = chat.first_name or str(chat_id)
    rating[name] = rating.get(name, 0) + score
    with open(RATING_FILE, 'w', encoding='utf-8') as f:
        json.dump({k: int(v) for k, v in rating.items()}, f, ensure_ascii=False, indent=2)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name}: {score}/{total}, –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating[name]}")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø‚Äë5
    top = sorted(rating.items(), key=lambda x: x[1], reverse=True)[:5]
    lb = "\n".join([f"{i+1}. {u} ‚Äî {pts}" for i, (u, pts) in enumerate(top)])
    kb = ReplyKeyboardMarkup([['‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å', 'üèÜ –†–µ–π—Ç–∏–Ω–≥']], resize_keyboard=True)
    await context.bot.send_message(chat_id, msg + f"\n\nüèÜ –†–µ–π—Ç–∏–Ω–≥:\n{lb}", reply_markup=kb)

    context.chat_data.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ –≤–æ–ø—Ä–æ—Å—É
async def time_up(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    q = context.chat_data.get('current_q')
    if q:
        await context.bot.send_message(chat_id, f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['answer']}")
        context.chat_data['index'] += 1
        await send_question_by_chat_id(chat_id, context)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    name = update.effective_user.first_name or '–¥—Ä—É–≥'
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –Ø ‚Äî –±–æ—Ç‚Äë–∫–≤–∏–∑ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ü–û."
        "\n\n‚öôÔ∏è –ü—Ä–∞–≤–∏–ª–∞:"
        "\n  ‚Ä¢ –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–∞—ë—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:"
        "\n    ‚Äì –õ—ë–≥–∫–∏–π: 10 —Å–µ–∫;"
        "\n    ‚Äì –°—Ä–µ–¥–Ω–∏–π: 20 —Å–µ–∫;"
        "\n    ‚Äì –°–ª–æ–∂–Ω—ã–π: 30 —Å–µ–∫."
        "\n  ‚Ä¢ –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª ‚Äî –≤–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π."
        "\n\n‚ñ∂Ô∏è –ù–∞–∂–º–∏ ¬´–ò–≥—Ä–∞—Ç—å¬ª –∏–ª–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        "\nüèÜ –ù–∞–∂–º–∏ ¬´–†–µ–π—Ç–∏–Ω–≥¬ª –∏–ª–∏ /rating, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–¥–µ—Ä–æ–≤."
        "\nüõë /stop ‚Äî –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–≤–∏–∑–∞."
        "\n‚ÑπÔ∏è /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
    )
    kb = ReplyKeyboardMarkup([['‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å', 'üèÜ –†–µ–π—Ç–∏–Ω–≥']], resize_keyboard=True)
    await update.message.reply_text(text, reply_markup=kb)

# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
async def help_command(update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã:"
        "\n/start ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        "\n/quiz ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑"
        "\n/rating ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø‚Äë—Ä–µ–π—Ç–∏–Ω–≥–∏"
        "\n/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–≤–∏–∑"
        "\n/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    await update.message.reply_text(text)

# –ó–∞–ø—É—Å–∫ –∫–≤–∏–∑–∞: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def quiz(update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data.clear()
    kb = ReplyKeyboardMarkup([[cat] for cat in CATEGORIES], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def handle_category(update, context: ContextTypes.DEFAULT_TYPE):
    cat = update.message.text
    if cat not in CATEGORIES:
        return await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–Ω–æ–ø–∫–æ–π.')
    context.chat_data['category'] = cat
    if cat == 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–∏–∫—Å':
        all_q = [q for lst in QUESTIONS.values() for q in lst]
        random.shuffle(all_q)
        mix_size = random.randint(8, 15)
        context.chat_data.update({'questions': all_q[:mix_size], 'difficulty': '–º–∏–∫—Å', 'index': 0, 'score': 0})
        return await send_question_by_chat_id(update.effective_chat.id, context)
    kb = ReplyKeyboardMarkup([['–õ—ë–≥–∫–∏–π'], ['–°—Ä–µ–¥–Ω–∏–π'], ['–°–ª–æ–∂–Ω—ã–π']], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:', reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
async def handle_difficulty(update, context: ContextTypes.DEFAULT_TYPE):
    diff = update.message.text
    if diff not in ['–õ—ë–≥–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–°–ª–æ–∂–Ω—ã–π']:
        return await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.')
    context.chat_data['difficulty'] = diff
    cat = context.chat_data['category']
    context.chat_data.update({
        'questions': [q for q in QUESTIONS.get(cat, []) if q['difficulty'] == diff],
        'index': 0,
        'score': 0
    })
    await send_question_by_chat_id(update.effective_chat.id, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_answer(update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = context.chat_data
    job = data.pop('job', None)
    if job:
        job.schedule_removal()
    q = data.get('current_q')
    if q and update.message.text == q['answer']:
        data['score'] += 1
        await update.message.reply_text('‚úÖ –í–µ—Ä–Ω–æ!')
    else:
        ans = q['answer'] if q else '‚Äî'
        await update.message.reply_text(f'‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {ans}')
    data['index'] += 1
    await send_question_by_chat_id(chat_id, context)

# –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
async def show_rating(update, context: ContextTypes.DEFAULT_TYPE):
    rating = context.bot_data.get('rating', {})
    if not rating:
        return await update.message.reply_text('–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª.')
    top = sorted(rating.items(), key=lambda x: x[1], reverse=True)[:10]
    lb = "\n".join([f"{i+1}. {u} ‚Äî {pts}" for i,(u,pts) in enumerate(top)])
    await update.message.reply_text(f"üèÜ –†–µ–π—Ç–∏–Ω–≥:\n{lb}")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–≤–∏–∑–∞
async def stop_quiz(update, context: ContextTypes.DEFAULT_TYPE):
    context.chat_data.clear()
    await update.message.reply_text('–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.', reply_markup=ReplyKeyboardRemove())

# –û–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in ['‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å', '–ò–≥—Ä–∞—Ç—å']:
        return await quiz(update, context)
    if text in ['üèÜ –†–µ–π—Ç–∏–Ω–≥', '–†–µ–π—Ç–∏–Ω–≥']:
        return await show_rating(update, context)
    if 'category' not in context.chat_data:
        return await handle_category(update, context)
    if 'difficulty' not in context.chat_data:
        return await handle_difficulty(update, context)
    return await handle_answer(update, context)

def main() -> None:
    app = ApplicationBuilder().token(TOKEN).build()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫ —Ü–µ–ª—ã–º —á–∏—Å–ª–∞–º
    if os.path.exists(RATING_FILE):
        with open(RATING_FILE, 'r', encoding='utf-8') as f:
            raw = json.load(f)
        rating = {}
        for u, v in raw.items():
            try:
                rating[u] = int(v)
            except:
                rating[u] = 0
        app.bot_data['rating'] = rating
    else:
        app.bot_data['rating'] = {}

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('quiz', quiz))
    app.add_handler(CommandHandler('rating', show_rating))
    app.add_handler(CommandHandler('stop', stop_quiz))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.set_event_loop(asyncio.new_event_loop())
    asyncio.get_event_loop().run_until_complete(init_questions())
    print('üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∏–≥—Ä–æ–∫–æ–≤...')
    app.run_polling()

if __name__ == '__main__':
    main()
