import os
import json
import logging

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s ‚Äî %(name)s ‚Äî %(levelname)s ‚Äî %(message)s",
    level=logging.INFO,
)

# –¢–æ–∫–µ–Ω Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TG_QUIZ_TOKEN")

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
CATEGORIES = [
    "–¢–∏–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
    "–¢–µ—Ö–Ω–∏–∫–∏ –¥–∏–∑–∞–π–Ω–∞ —Ç–µ—Å—Ç–æ–≤",
    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏",
    "DevOps –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è",
    "API‚Äë—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–µ–±‚Äë—Å–µ—Ä–≤–∏—Å—ã",
    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–≥—Ä—É–∑–∫–∞",
    "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (Security Testing)",
    "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —é–∑–∞–±–∏–ª–∏—Ç–∏",
    "–ú–æ–±–∏–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (Compatibility)",
    "–ü—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–∫—Ä–∏–ø—Ç—ã",
    "–ú—è–≥–∫–∏–µ –Ω–∞–≤—ã–∫–∏ (Soft Skills)"
]

# –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
DIFFICULTIES = ["–õ–µ–≥–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–°–ª–æ–∂–Ω—ã–π"]

# –ü–∞–ø–∫–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
QUESTIONS_DIR = 'questions'
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
SCORE_FILE = 'scores.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–æ–≤
QUESTIONS = {}
for category in CATEGORIES:
    slug = category.lower().replace(' ', '_').replace('(', '').replace(')', '').replace('‚Äë', '-')
    path = os.path.join(QUESTIONS_DIR, slug + '.json')
    try:
        with open(path, encoding='utf-8') as f:
            data = json.load(f)
            QUESTIONS[category] = data if isinstance(data, list) else []
    except FileNotFoundError:
        logging.info(f"–§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        QUESTIONS[category] = []
    except json.JSONDecodeError:
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ: {path}")
        QUESTIONS[category] = []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {e}")
        QUESTIONS[category] = []

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º

def load_scores():
    try:
        with open(SCORE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception:
        return {}


def save_scores(scores):
    try:
        with open(SCORE_FILE, 'w', encoding='utf-8') as f:
            json.dump(scores, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Quiz‚Äë–±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤."
        "\n–ò—Å–ø–æ–ª—å–∑—É–π /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É."  
        "\n–°–ø—Ä–∞–≤–∫–∞ ‚Äî /help, —Ä–µ–π—Ç–∏–Ω–≥ ‚Äî /leaderboard"
    )
    await update.message.reply_text(text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/quiz ‚Äî –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n"
        "/leaderboard ‚Äî —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    scores = load_scores()
    if not scores:
        await update.message.reply_text("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Å—ã–≥—Ä–∞–µ—Ç!")
        return
    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    msg = "üèÜ *–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n"
    for i, (user, pts) in enumerate(sorted_scores[:10], 1):
        msg += f"{i}. {user}: {pts} –æ—á–∫–æ–≤\n"
    await update.message.reply_text(msg, parse_mode="Markdown")

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_state[chat_id] = {
        'difficulty': None,
        'category': None,
        'questions': [],
        'index': 0,
        'score': 0
    }
    keyboard = ReplyKeyboardMarkup(
        [[d] for d in DIFFICULTIES],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:', reply_markup=keyboard)

async def on_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    username = update.effective_user.full_name
    text = update.message.text.strip()

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
    if text == '‚ñ∂Ô∏è –ù–æ–≤–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞':
        return await quiz(update, context)
    if text == 'üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏':
        keyboard = ReplyKeyboardMarkup(
            [[c] for c in CATEGORIES],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        return await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:', reply_markup=keyboard)
    if text == '‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥':
        return await leaderboard(update, context)
    if text == '‚ùì –°–ø—Ä–∞–≤–∫–∞':
        return await help_command(update, context)

    state = user_state.get(chat_id)
    if not state:
        await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.')
        return

    # –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if state['difficulty'] is None:
        if text not in DIFFICULTIES:
            await update.message.reply_text(f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {text}')
            return
        state['difficulty'] = text
        keyboard = ReplyKeyboardMarkup(
            [[c] for c in CATEGORIES],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:', reply_markup=keyboard)
        return

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if state['category'] is None:
        if text not in CATEGORIES:
            await update.message.reply_text(f'‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è {text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            return
        state['category'] = text
        all_q = QUESTIONS.get(text, [])
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ difficulty
        filtered = [q for q in all_q if q.get('difficulty') == state['difficulty']] if any('difficulty' in q for q in all_q) else all_q
        state['questions'] = filtered
        if not filtered:
            await update.message.reply_text('‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.')
            return
        await send_question(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    q_list = state['questions']
    idx = state['index']
    current = q_list[idx]
    if text == current['answer']:
        state['score'] += 1
        await update.message.reply_text('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!')
    else:
        await update.message.reply_text(f'‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current["answer"]}')
    state['index'] += 1
    if state['index'] < len(q_list):
        await send_question(update, context)
        return

    # –ö–æ–Ω–µ—Ü –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –º–µ–Ω—é
    score = state['score']
    total = len(q_list)
    percent = score / total
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    scores = load_scores()
    scores[username] = scores.get(username, 0) + score
    save_scores(scores)

    if percent >= 0.8:
        msg = f"üéâ –û—Ç–ª–∏—á–Ω–æ, {username}! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score}/{total} ({percent:.0%}). –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    elif percent >= 0.5:
        msg = f"üëç –ù–µ–ø–ª–æ—Ö–æ, {username}! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score}/{total} ({percent:.0%}). –ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
    else:
        msg = f"üí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, {username}! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score}/{total} ({percent:.0%}). –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!"

    keyboard = ReplyKeyboardMarkup(
        [
            ['‚ñ∂Ô∏è –ù–æ–≤–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞'],
            ['üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', '‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥'],
            ['‚ùì –°–ø—Ä–∞–≤–∫–∞']
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        f"{msg}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=keyboard
    )
    user_state.pop(chat_id)

async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    state = user_state.get(chat_id)
    if not state or not state.get('questions'):
        return
    q = state['questions'][state['index']]
    keyboard = ReplyKeyboardMarkup(
        [[opt] for opt in q['options']],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    text = (
        f"üìã *{state['category']}* | {state['difficulty']}\n"
        f"–í–æ–ø—Ä–æ—Å {state['index']+1}/{len(state['questions'])}: {q['question']}"
    )
    await context.bot.send_message(
        chat_id,
        text=text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CommandHandler('leaderboard', leaderboard))
    app.add_handler(CommandHandler('quiz', quiz))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_message))
    print('üì° Quiz-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶')
    app.run_polling()
